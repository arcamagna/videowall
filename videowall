#!/bin/env bash

## colours ##

GREEN=$'\e[32m'
CYAN=$'\e[36m'
RESET=$'\e[0m'


## help ##

help="\n\
${GREEN}Mimics a video wall by creating an overlay filter for ffmpeg.\n\
Works with both videos and images.$RESET
\n\
${CYAN}Usage:$RESET videowall [options] [files..]\n\
\n\
${CYAN}Options:\n\
 $CYAN-n$RESET  <int> Number of rows (max 16). Default is 4, or 3 in portrait mode.\n\
 $CYAN-m$RESET  <int> Maximum number of files. This determines the tile sequence before repeating.\n\
 $CYAN-M$RESET  <str> Display mode for tiles. Landscape mode is used by default.\n\
 	L  Use landscape files only.\n\
 	p  Portrait mode.\n\
 	P  Use portrait files only.\n\
 $CYAN-s$RESET  <int> Skip number of valid files e.g. -s4 use 5th valid file onwards.\n\
 $CYAN-c$RESET    File check (slower start up).\n\
 $CYAN-F$RESET  <int> Target frame rate. Default 30fps.\n\
 $CYAN-r$RESET    Find files recursively.\n\
 $CYAN-f$RESET  <str> Filter filetype(s) e.g. \"mp4 jpg\".\n\
 $CYAN-t$RESET  <str> Title type (name or tag) and position (centre or left) e.g. \"tag centre\". Default is no titles.\n\
 $CYAN-d$RESET  <int> Duration in seconds.\n\
 $CYAN-S$RESET    Shuffle file order.
 $CYAN-g$RESET  <str> Grid or bezel colour and thickness e.g. \"black 3\". Default is no grid.\n\
 $CYAN-a$RESET  <str|int> File name or tile number for audio source. Default is no audio.\n\
 $CYAN-o$RESET  <str> Specify a path and file name to record output.\n\
 $CYAN-l$RESET    Use with output file to specify lossless H.264 encoding.\n\
 $CYAN-p$RESET    Use with output file to specify Apple ProRes encoding.\n\
 $CYAN-D$RESET    demo\n\
\n\
${CYAN}Files:$RESET\n\
\n\
Directory name or list of videos/images. If omitted current directory is used.\n\
\n\
${CYAN}Operation:$RESET\n\
\n\
If there aren't enough files available or the number of files is limited with -m then they will be repeated to fill the given area.\n\
Performance can be very slow for larger values of n especially when mode is L or P or tag is used for title.\n\
Lossless or ProRes encoding can produce very large files. These have very little or no compression and are best used with a set duration.\n\
\n\
Press q to quit\n\
\n\
${CYAN}Examples:$RESET\n\
\n\
${GREEN}videowall$RESET\n\
\n\
4x4 grid of videos and/or images from the current directory. Sequence will be repeated if there aren't 16 unique valid files.\n\
\n\
${GREEN}videowall -Mp -Sn2 -g\"#054da5 4\" -t \"tag centre\"$RESET\n\
\n\
2x4 random grid of videos each having a 4 px blue frame and title tag bottom centre if one exists.\n\
\n\
${GREEN}videowall -n6 -f \"mp4 mkv\" -rs 50 -o \"/tmp/6x6 video wall.mp4\" ~$RESET\n\
\n\
6x6 grid by recursively searching for mp4 and mkv files in user directory. The first 50 files will be skipped. Files will not be checked for valid video streams. Output will be recorded to \"/tmp/6x6 video wall.mp4\" instead of displaying on screen.\n\
\n"


## regex patterns ##

exp='^[0-9]+$'
word='^[a-z]|#([A-Fa-f0-9]{6})+$'


## config file ##

config="H4sICBzz9GICA3ZpZGVvd2FsbHJjAIVV224bNxB991cM7AfJgCX5ogSBgX0IargJ4LhGnfrVoHZn
JcbcJcPLyurX9wy5sp0gbV+0GnLmzO3M8IhuU7diT7Ylb7eBpnRGMzp7T8cHR3JQLQ8OjuhKB2fU
jjrb8CU5mjrro1c6Hp/Q3atErTYcyPZmd0zW0w1NjeqbUCvHb+/mdPNyrAPFDVPDrUomZg/zgyP5
VE5c/+51Q7U1NnmCEW11Ezeke3L6mU2A7hoa1eHKJKaL94di86AbtiQRI7PpCH1JnRvg+j45iZda
BIiTExpMvajxc0JtKzaALKbVYqX7RTkU2D8G9vDFtHaJAhuuo7b9nD63tLOJNmpg6uBJOwMdr9xG
14Fq5ZuQFTpUcKvDhqKFeUTeOsfvUvW5j2zExxf1rLvUUf/Sllw3KYl6HnQzNuT2x+uM+KQd1ORT
neamJa8kQJoGri3qjeSvxjLrbJJ7qnsUSPcaAUjqzWhVvROMr8qvEWnrVceEC6apqmNSpggNOwYw
ukq1Sye5MBzrY+C0LlQXOY4/OUSv68IOijuX08nf6vCbW6MLy9y2+1zSoibdUanRlqZR5H09PDkV
cwUtaOOz8o959bYYwkf+VmcliNr6hmyKLkUxF8M53dkQ9MoUdhI/R+4Dkg+kPEtcJ9Q9DeK1swMA
YV4tYucWgzBsq4yZQ0nwr8W+3nD9NKePKdoORaxxv8ud3m64z9TGSADsTuJMgRuw0dgt0ghRgZLJ
0QrRbdg4RDDYzHzvk4vcjI2WEQgWzSjpg5DWSzmz6yr6xLmSm9S2UuyRO6HIr/esfL3JRS6wnuvk
gx4KB16kF4P9AlCAjABGw1kBIeYqPigZvlr1tGKa9ODKRNKcRLWe5IgnhttYzmruo+fJvFRMdDET
xoilVIR0K/vA89jK4g5AQhn5Xx1CIMHLnLm2fRnlotiUOIV/uKgWKfhF2KCZC5HD4uvX68UVf1MP
6V71YR5jm1m+d5KRfKYK78nySq7Jw77rkzEYmFQC8JvtOuT1/xBamLVOWdnoEKVzxXYPdSVz9W84
GE9c71WvrzvHa+K+to3u15gMGdPIQghcf8Li2QqPP83P3y+LGvs5/TWWGY4xS5n9t8hMqzy+iLC1
qQc1b20sLXmNBF4QwwZwj/0AwOpwVl8O9HpAsxXkiy80w7qSFQHpHaRVaoP+W6QPkJy3QjtIncIm
h8yYEogOj09MvdwkcGJmGIyEsJyf08yLq2HlgdaKE5rlhPC3VitVlxVi2/iLnA+OjF4942QMeJSA
4Fs6v9hHAKd4x1oVCrc+Olnkb8p05y2W2RtUJALDx6cw4r7Ib3OEm+/lgwo1stecOUUSOoZHx/6x
W9GH01Oc4EV7bLtIuzSo5XLpzk4N50BusKUwpQGT/9/pPZpR8+c8f84PITk6LVnmLbsnkWxNAS2t
Vcje7bLanddCcDzVv+QbVozd5oPwsjRurAwqOkjT70lzxAOrIp4OO+4teSaMXWeVKmv86MjivZWl
gzrGnKX4KELx8Q8McyNSvggAAA=="

if [[ -d $HOME/.config ]]; then
		VIDDIR=$HOME/.config/videowall
		RCNAME=videowallrc
	[[ ! -d $VIDDIR ]] && mkdir $VIDDIR
else
	VIDDIR=$HOME
	RCNAME=.videowallrc
fi

if [[ ! -f $VIDDIR/$RCNAME ]]; then
	base64 -d <<< "$config" | gzip -d > $VIDDIR/$RCNAME && echo "$VIDDIR/$RCNAME created"
else
	. $VIDDIR/$RCNAME
fi

font="${font:-/usr/share/fonts/TTF/Inconsolata-SemiBold.ttf}"
fontcolour="${fontcolour:-white}"

case $player in
	*vlc | *cvlc) player=("$player" -q -f --key-quit 'q' --no-osd - --run-time=$duration "vlc://quit")
		;;
	*ffplay) player=("$player" -hide_banner -loglevel panic -autoexit -fs -)
		;;
	*mplayer) player=("$player" -fs -)
		;;
	*) player=(mpv --fullscreen --really-quiet -)
		;;
esac


## process input options ##

args=$@

while getopts :cDhlprSa:d:f:F:g:m:M:n:o:s:t: opts; do
   case "$opts" in
	h)	printf "$help"
		exit 0
		;;
	n) rows=$OPTARG
		[[ ! $rows =~ $exp ]] && echo Please specify a number from 1 to 16 for -n && exit
		(( rows > 16 )) && rows=16
		;;
	M) mode=$OPTARG
		;;
	m) maxvids=$OPTARG
		;;
	s) skip=$OPTARG
		;;
	F) fps=$OPTARG
		;;
	f) types=($OPTARG)
		;;
	g) grid="${OPTARG}"
		;;
	o) out="${OPTARG}"
		;;
	p) prores=true
		warning="Prores"
		;;
	l) lossless=true
		warning="Lossless H.264"
		;;
	a) audio="${OPTARG}"
		;;
	c) check=true
		;;
	S) shuffle=true
		;;
	r) recursive=true
		;;
	t) title="${OPTARG}"
		;;
	d) duration=${OPTARG}
		;;
	D) demo=(https://www.w3schools.com/html/mov_bbb.mp4)
		rows=3
		grid="#ff4400 5"
		;;
	:) echo $OPTARG requires argument
		exit 1
		;;
	*)	echo Option not recognised
		exit 1
		;;
	esac
done

shift $((OPTIND - 1))


## check for required applications ##

for app in ffmpeg ffprobe xdpyinfo lspci; do
	apps+=$(hash $app 2>/dev/null || echo " $app\n")
done
[[ -n $apps ]] && printf "Please install:\n$apps" && exit 1
for vapp in mpv vlc cvlc ffplay mplayer; do
	playerslist+=$(hash $vapp 2>/dev/null && echo "$vapp")
done
[[ -z $out && -z $playerslist ]] && printf "Please install a supported video player:\nmpv, vlc (cvlc), ffplay, or mplayer\n" && exit 1


## set mode parameters ##

case "$mode" in
	p)	factor=2 ;;
	P)	check=true; factor=2 ;;
	L)	check=true ;;
esac


## lossless/prores warning ##

[[ -n $lossless || -n $prores ]] &&
	{ echo "$warning mode can produce very large files.";
	{ [[ -z $out ]] && echo "You must specify an output file." && exit; };
	{ [[ -z $duration ]] && echo "You may want to specify a duration"; };
	echo "Continue y/n?"; read -sn 1 cont;  echo -e '\e[1A\e[K'; [[ $cont == n ]] && exit ; }


## graphics capabilities ##

cards=$(lspci | grep VGA)
[[ -n $(grep -i nvidia <<< "$cards") ]] && gpus+=(nvidia)
[[ -n $(grep -i intel <<< "$cards") ]] && gpus+=(intel)
gpu=${gpu,,}
gpu=${gpu:-${gpus[0]}}
#[[ -z $gpu || ! ${gpus[@]} =~ $gpu ]] && echo $gpu gpu not supported && exit 1

dims=$(xdpyinfo &>/dev/null | grep dimensions | awk '{print $2;}')
[[ -n $dims ]] && readarray -tdx wh <<< $dims
bw=${wh[0]:-1920}; bh=${wh[1]:-1080}


## initialise values ##

[[ -n $duration ]] && duration=(-t $duration)

fps=${fps:-30}

[[ -z $types ]] && types=(mp4 mkv mov ts webm avi wmv jpg jpeg png gif)

skip=${skip:-0}

num=0

factor=${factor:-1}

if [[ $factor == 2 ]]; then
	[[ $rows == 16 ]] && rows=15
	maxsides=${rows:-3}
else
	maxsides=${rows:-4}
fi
max=$(($maxsides*$maxsides*$factor))
[[ -z $maxvids ]] || ((maxvids > max)) && maxvids=$max

if [[ -n $title ]]; then
	title=($title)
	[[ ${#title[@]} != 2 ]] && echo "Please specify name/tag and left/centre for title" && exit
	if [[ ${title[0]} != name && ${title[0]} != tag ]]; then
		tmparr=(${title[1]} ${title[0]})
		title=(${tmparr[@]})
		if [[ ${title[0]} != name && ${title[0]} != tag ]]; then
			echo "Please specify 'name' or 'tag'" && exit
		elif [[ ${title[1]} != centre && ${title[1]} != left ]]; then
			echo "Please specify 'centre' or 'left'" && exit
		fi
	fi
fi


## build file list ##

input=$(echo $@ | sed -r 's/-[a-z]* ?|-F [a-z]* ?|-[a-z] [a-z]* ?//g')
[[ ${input: -1} == ' ' ]] && { echo "Please put options first"; exit; }

function recurse() {
	for i in "$1"/*; do
		[[ -d "$i" ]] && recurse "$i" || { [[ -f "$i" ]] && vids+=("$i"); }
	done
}

[[ -z $input ]] &&
{ { [[ -n $demo ]] && vids=("$demo"); } || { [[ -n $recursive ]] && recurse $PWD || vids=(*); }; } ||
{ [[ -d $input ]] && { [[ -n $recursive ]] && recurse $input || vids=("$input"/*); } || vids=("$@"); }

for file in "${vids[@]}"; do
	if [[ $(( num - skip )) == $maxvids ]]; then
		break
	else
		ext="${file##*.}"
		if [[ -f "$file" && " ${types[@]} " =~ " $ext " || " ${types[@]} " =~ " ${ext,,} " || "${file:0:4}" == http ]]; then
			if [[ -n $check ]]; then
				checkfile=($(ffprobe -hide_banner -v panic -select_streams v:0 -show_entries "stream=codec_type,width,height:format_tags=title" \
-of default=noprint_wrappers=1 -i "$file"))
				[[ ${checkfile[0]##*=} != video ]] && continue
				thisw=${checkfile[1]##*=}
				thish=${checkfile[2]##*=}
				[[ $mode == L ]] && (( $thish > $thisw )) && continue
				[[ $mode == P ]] && (( $thisw > $thish )) && continue
				thistitle=$(grep "TAG:title" <<< "${checkfile[@]}")
				thistitle="${thistitle##*=}"
			fi
			((num++))
			(( $num <= $skip )) && continue
			if [[ -n $title ]]; then
				if [[ ${title[1]} == tag && -n $thistitle ]]; then
					t="${thistitle//\'/â€™}"
					t="${t//\:/-}"
					unset thistitle
				else
					t="${file##*/}"
					t="${t%.$ext}"
				fi
				titles+=("'${t:0:36}'")
			else
				titles+=("")
			fi
			inputs+=(-stream_loop -1 -i "${file}")
			files+=("${file}")
		fi
	fi
done

[[ -z $files ]] && echo No files found && exit

(( num-=$skip ))

if [[ $((max-num)) > 0 ]]; then
	f=0
	for i in $(seq 0 $((max-num-1))); do
		files+=("${files[$f]}")
		titles+=("${titles[$f]}")
		inputs+=(-stream_loop -1 -i "${files[$f]}")
		((f++))
		(( f >= num )) && f=0
	done
	num=$max
fi

if [[ -n $shuffle ]]; then
	while read numtitles; do
		sfiles+=("${files[$numtitles]}")
		stitles+=("${titles[$numtitles]}")
		sinputs+=(-stream_loop -1 -i "${files[$numtitles]}")
	done < <(
		seq 0 $((${#titles[@]}-1)) | shuf
	)
	files=("${sfiles[@]}")
	titles=("${stitles[@]}")
	inputs=("${sinputs[@]}")
fi

(( $num < 1 )) || [[ -z $num ]] && { echo No valid files; exit; }

numf=$(( (num+factor-1)/factor ))
for (( i=0; i<=maxsides; i++ )); do
	n=$((i*i))
	m=$(((i+1)*(i+1)))
	(( numf == n )) && { max=$n; break; }
	(( numf > n && numf < m )) && { max=$m; break; }
done

sides=$(echo "sqrt($max)" | bc)
w0=0; w1=$((bw/sides/$factor))
h0=0; h1=$((bh/sides))
for (( i=2; i<=$((maxsides*factor)); i++ )); do
	width=w$i; wval=$((w1*i))
	eval "${width}=\${wval}";
	height=h$i; hval=$((h1*i))
	eval "${height}=\${hval}";
done


## create overlay parameters ##

for ((i=0;i<$sides;i++)); do
	for ((j=0;j<$((sides*factor));j++)); do
		x=$j; x=w$((x++))
		y=$i; y=h$y
		coords+=(x=${!x}:y=${!y})
	done
done

if [[ -n $grid ]]; then
	grid=($grid)
	[[ ! ${grid[0]} =~ $word && ! ${grid[1]} =~ $word ]] || [[ ! ${grid[0]} =~ $exp && ! ${grid[1]} =~ $exp ]] && echo "Grid requires colour (name or full hex value) and integer" && exit
	[[ ${grid[0]} =~ $exp || ${grid[1]} =~ $word ]] && { tmparr=(${grid[1]} ${grid[0]}); grid=(${tmparr[@]}); }
	pos=$((${grid[1]}+4))
	grid=",drawbox=0:0:0:0:${grid[0]}:t=${grid[1]}"
fi

[[ ${title[1]} == centre ]] && position=": x=(w-text_w)/2: y=(h-text_h)/2+$((4*$h1/10))" || position=": x=${pos:-4}: y=${pos:-4}"

ptsize=$(($w1/20))

sc="scale=${w1}x${h1}"

dt1="drawtext=fontfile=${font}:text="
dt2=": fontcolor=${fontcolour}: fontsize=$ptsize: box=1: boxcolor=black@0.3: boxborderw=6$position$grid"

fc="color=c=black:size=${bw}x${bh}[base];"

for vid in "${!titles[@]}"; do
	vid1=$(($vid+1))
	fc+="[$vid:v]fps=$fps,$sc,$dt1${titles[$vid]}$dt2[$vid1];"
	vid2=$(($vid+2))
	if [[ $vid -lt $(($num-1)) ]]; then
		[[ $vid == 0 ]] && fc+="[base][$vid1]overlay=${coords[$vid]}[tmp$vid1];" || fc+="[tmp$vid][$vid1]overlay=${coords[$vid]}[tmp$vid1];"
	else
		[[ $num == 1 ]] && fc+="[base][$vid1]overlay=${coords[$vid]}" || fc+="[tmp$vid][$vid1]overlay=${coords[$vid]}"
	fi
done


## ffmpeg codec parameters ##

if [[ -n $audio ]]; then
	if [[ $audio =~ $exp ]]; then
		(( audio > num )) || [[ $audio == 0 ]] && { echo Audio index out of range; exit; }
		anum=$((--audio))
	else
		anum=$num
		ainput=(-stream_loop -1 -i "$audio")
	fi
	aoutput=(-map "$anum:a?")
else
	unset aoutput
	acodec=-an
fi

titletag=${titletag:-'Videowall'}
commenttag=${commenttag:-$args}
datetag=${datetag:-$(date +%c)}

h264_nvenc="${h264_nvenc:--c:v h264_nvenc -b:v 3M -maxrate:v 5M -bufsize:v 8M -profile:v main -preset:v p1 -tune:v ull -level:v 4.2 -rc:v vbr -bf:v 3 -coder:v cabac}"
libx264="${libx264:--c:v libx264 -crf 23 -preset ultrafast}"
prores_ks="${prores_ks:--c:v prores_ks -profile:v 4 -q:v 4 -vendor apl0 -bits_per_mb 8000 -pix_fmt yuva444p10le}"
libx264_lossless="${libx264_lossless:--c:v libx264 -preset ultrafast -qp 0}"
acodec="${acodec:--c:a aac}"

loglevel=${loglevel:-panic}

ctype=mp4
if [[ -z $out ]]; then
	[[ $gpu == nvidia ]] && opts=(-r $fps \
   "$h264_nvenc" $acodec ${aoutput[@]}) || opts=(-r $fps "$libx264" $acodec ${aoutput[@]})
elif [[ -n $prores ]]; then
	ctype=mov
	opts=(-r $fps "$prores_ks" -c:a pcm_s16le ${aoutput[@]})
elif [[ -n $lossless ]]; then
	opts=(-r $fps "$libx264_lossless" $acodec ${aoutput[@]})
else
	opts=(-r $fps "$libx264" $acodec ${aoutput[@]})
fi

[[ -n $showparams ]] && echo ${opts[@]}
[[ -n $showfilter ]] && echo "-filter_complex $fc"

tags=(-fflags +bitexact -flags:a +bitexact -map_metadata -1 -metadata "TITLE=$titletag" -metadata "DATE=$datetag" -metadata "COMMENT=$commenttag")


## build ffmpeg command ##

cmd=(ffmpeg -hide_banner -loglevel $loglevel -y "${inputs[@]}" -filter_complex "$fc" "${ainput[@]}" ${duration[@]} "${tags[@]}" ${opts[@]})


## record or display ##

[[ -n $out ]] && "${cmd[@]}" -f $ctype "$out" || "${cmd[@]}" -f matroska pipe: | "${player[@]}" 2>/dev/null

[[ $? != 0 ]] && echo Options error or missing video streams
